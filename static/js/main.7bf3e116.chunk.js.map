{"version":3,"sources":["components/User/User.js","components/Comment/Comment.js","components/CommentList/CommentList.js","components/Post/Post.js","components/PostList/PostList.js","components/PostLoad/PostLoad.jsx","App.js","index.js"],"names":["User","_ref","user","react_default","a","createElement","className","href","concat","email","name","address","street","suite","city","Comment","comment","body","CommentList","comments","map","Comment_Comment","key","id","Post","post","title","User_User","components_CommentList_CommentList","PostList","posts","Post_Post","PostLoad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getPostsWithUsersAndComments","postsList","usersList","commentsList","usersMap","Map","commentsMap","forEach","set","indicator","get","postId","commentMapValue","toConsumableArray","push","_objectSpread","userId","getDataFromServer","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","abrupt","fetch","then","response","json","stop","_x","apply","arguments","state","users","isLoading","usersUrl","postsUrl","commentsUrl","loadTodos","bind","assertThisInitialized","getTodosWithUsers","setState","Promise","all","_this$state","PostList_PostList","type","onClick","Component","App","components_PostLoad_PostLoad","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7bf3e116.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction User({ user }) {\n  return (\n    <div className=\"post__author author\">\n      <a className=\"user__name name\" href={`mailto:${user.email}`}>\n        {user.name}\n      </a>\n      <br />\n      <span className=\"user__address address\">\n        {`${user.address.street} ${user.address.suite}, ${user.address.city}`}\n      </span>\n    </div>\n  );\n}\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    address: PropTypes.shape({\n      street: PropTypes.string.isRequired,\n      suite: PropTypes.string.isRequired,\n      city: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './comment.css';\n\nfunction Comment({ comment }) {\n  return (\n    <div className=\"comment\">\n      <a className=\"comment__author author\" href={`mailto:${comment.email}`}>\n        {comment.name}\n      </a>\n      <p className=\"comment__text text\">{comment.body}</p>\n    </div>\n  );\n}\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    postID: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from '../Comment/Comment';\nimport './CommentList.css';\n\nfunction CommentList({ comments }) {\n  return (\n    <div className=\"post__comments comments\">\n      {comments.map(comment => <Comment comment={comment} key={comment.id} />)}\n    </div>\n  );\n}\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    postID: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  })).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from '../User/User';\nimport CommentList from '../CommentList/CommentList';\nimport './post.css';\n\nfunction Post({ post }) {\n  return (\n    <li className=\"post\">\n      <h1 className=\"post__heading heading\">{post.title}</h1>\n      <p className=\"post__text text\">{post.body}</p>\n      <User user={post.user} />\n      <CommentList comments={post.comments} />\n    </li>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    userId: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    user: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      adress: PropTypes.shape({\n        street: PropTypes.string.isRequired,\n        suite: PropTypes.string.isRequired,\n        city: PropTypes.string.isRequired,\n      }),\n    }).isRequired,\n    comments: PropTypes.arrayOf(PropTypes.shape({\n      postID: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n    })).isRequired,\n  }).isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from '../Post/Post';\n\nfunction PostList({ posts }) {\n  return (\n    <ul className=\"list\">\n      {posts.map(post => <Post post={post} key={post.id} />)}\n    </ul>\n  );\n}\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    user: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      adress: PropTypes.shape({\n        street: PropTypes.string.isRequired,\n        suite: PropTypes.string.isRequired,\n        city: PropTypes.string.isRequired,\n      }),\n    }).isRequired,\n    comments: PropTypes.arrayOf(PropTypes.shape({\n      postID: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n    })),\n  }).isRequired).isRequired,\n};\n\nexport default PostList;\n","import React, { Component } from 'react';\nimport PostList from '../PostList/PostList';\n\nclass PostLoad extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: null,\n      posts: null,\n      comments: null,\n      isLoading: false,\n    };\n    this.usersUrl = 'https://jsonplaceholder.typicode.com/users';\n    this.postsUrl = 'https://jsonplaceholder.typicode.com/posts';\n    this.commentsUrl = 'https://jsonplaceholder.typicode.com/comments';\n    this.loadTodos = this.loadTodos.bind(this);\n    this.getTodosWithUsers = this.getPostsWithUsersAndComments.bind(this);\n    this.getDataFromServer = this.getDataFromServer.bind(this);\n  }\n\n  getPostsWithUsersAndComments = (postsList, usersList, commentsList) => {\n    const usersMap = new Map();\n    const commentsMap = new Map();\n\n    usersList.forEach((user) => {\n      usersMap.set(user.id, user);\n    });\n    commentsList.forEach((comment) => {\n      const indicator = commentsMap.get(comment.postId);\n\n      if (!indicator) {\n        const commentMapValue = [];\n\n        commentMapValue.push(comment);\n        commentsMap.set(comment.postId, commentMapValue);\n      } else {\n        const commentMapValue = [...indicator];\n\n        commentMapValue.push(comment);\n        commentsMap.set(comment.postId, commentMapValue);\n      }\n    });\n\n    return postsList.map(post => ({\n      ...post,\n      user: usersMap.get(post.userId),\n      comments: commentsMap.get(post.id),\n    }));\n  }\n\n  getDataFromServer = async url => fetch(url)\n    .then(response => response.json());\n\n  async loadTodos() {\n    this.setState({\n      isLoading: true,\n    });\n    const [users, posts, comments] = await Promise.all([\n      this.getDataFromServer(this.usersUrl),\n      this.getDataFromServer(this.postsUrl),\n      this.getDataFromServer(this.commentsUrl),\n    ]);\n\n    this.setState({\n      users,\n      posts,\n      comments,\n      isLoading: false,\n    });\n  }\n\n  render() {\n    const {\n      users,\n      posts,\n      comments,\n      isLoading,\n    } = this.state;\n\n    return (!users || !posts || !comments) ? (\n      <button type=\"button\" onClick={this.loadTodos}>\n        {isLoading ? 'Loading...' : 'Load'}\n      </button>\n    ) : (\n      <PostList posts={this.getTodosWithUsers(posts, users, comments)} />\n    );\n  }\n}\n\nexport default PostLoad;\n","import React from 'react';\nimport './App.css';\nimport PostLoad from './components/PostLoad/PostLoad';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      <PostLoad />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}